name: Unity CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unity-tests-windows:
    name: Unity Tests with API Integration (Windows)
    runs-on: windows-latest
    permissions:
      contents: read
      actions: write
      checks: write
    
    steps:
    - name: Checkout Unity project
      uses: actions/checkout@v4
      with:
        path: unity-project
        
    - name: Checkout MyCore API
      uses: actions/checkout@v4
      with:
        repository: hiskiapp/MyCore
        path: mycore-api
        
    - name: Setup PostgreSQL
      uses: ankane/setup-postgres@v1
      with:
        database: mycoredb
        
    - name: Setup .NET for API
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        cache: true
        cache-dependency-path: mycore-api/**/*.csproj
        
    - name: Restore API dependencies
      working-directory: mycore-api
      run: dotnet restore
      
    - name: Build API
      working-directory: mycore-api
      run: dotnet build --no-restore --configuration Release
      
    - name: Start API in background
      working-directory: mycore-api
      shell: pwsh
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=mycoredb;Username=postgres;Password="
        ASPNETCORE_URLS: "http://+:5018"
      run: |
        # Start API in background
        $process = Start-Process dotnet -ArgumentList "run --project MyCore.Api/MyCore.Api.csproj --no-build --configuration Release" -PassThru
        echo "API_PID=$($process.Id)" >> $env:GITHUB_ENV
        
        # Wait for API to be ready
        for ($i = 0; $i -lt 30; $i++) {
          try {
            $res = Invoke-WebRequest -Uri http://localhost:5018/pets -UseBasicParsing -ErrorAction SilentlyContinue
            if ($res.StatusCode -eq 200) { break }
          }
          catch { }
          Start-Sleep -s 1
        }

    - name: Verify seeded data
      run: curl -s http://localhost:5018/pets | grep -c '"name":"Doggo"' | grep 1
        
    - name: Cache Unity Library
      uses: actions/cache@v4
      with:
        path: unity-project/Library
        key: Unity-${{ runner.os }}-${{ hashFiles('unity-project/Packages/manifest.json', 'unity-project/ProjectSettings/ProjectVersion.txt') }}
        restore-keys: |
          Unity-${{ runner.os }}-
        
    - name: Run Unity Tests
      uses: game-ci/unity-test-runner@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        API_URL: "http://host.docker.internal:5018/pets"
      with:
        projectPath: unity-project
        githubToken: ${{ secrets.GITHUB_TOKEN }}
        customParameters: -logFile -
        artifactsPath: TestResults
        testMode: PlayMode
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unity-test-results-windows
        path: unity-project/TestResults
        if-no-files-found: warn
        
    - name: Stop API
      if: always()
      shell: pwsh
      run: |
        if ($env:API_PID) {
          Write-Host "Stopping API with PID: $env:API_PID"
          try {
            Stop-Process -Id $env:API_PID -Force
          }
          catch {
            Write-Host "Failed to stop API process: $_"
          }
        }

  build-unity-windows:
    name: Build Unity Project (Windows)
    runs-on: windows-latest
    needs: unity-tests-windows
    permissions:
      contents: read
      actions: write

    steps:
    - name: Checkout Unity project
      uses: actions/checkout@v4
      with:
        path: unity-project

    - name: Cache Unity Library
      uses: actions/cache@v4
      with:
        path: unity-project/Library
        key: Unity-${{ runner.os }}-${{ hashFiles('unity-project/Packages/manifest.json', 'unity-project/ProjectSettings/ProjectVersion.txt') }}
        restore-keys: |
          Unity-${{ runner.os }}-

    - name: Build Unity Project
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        projectPath: unity-project
        targetPlatform: StandaloneWindows64

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: unity-build-windows
        path: unity-project/build
